# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: make application-secret.yml
      run: |
        echo ${{secrets.APPLICATION_SECRET}} | base64 --decode > ./src/main/resources/application-secret.yml


    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
#      run: ./gradlew build -x test
#      run: ./gradlew build # The Swagger API specification requires test code to run.
      run: ./gradlew build --info


    # dockerHub login
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # Docker image build
    - name: docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo .

    # dockerHub 이미지 푸시
    - name: docker hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo

    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }} # EC2 인스턴스 퍼블릭 DNS
        username: ubuntu
        key: ${{ secrets.PRIVATE_KEY }} # pem 키
        timeout: 2m
        # 도커 작업
        script: |
          sudo docker rm -f $(docker ps -qa)
          sudo docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo
          sudo docker run -p 80:8080 -d ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo         
          docker image prune -f
    
    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
    #   with:
    #     gradle-version: '8.5'
    #
    # - name: Build with Gradle 8.5
    #   run: gradle build
